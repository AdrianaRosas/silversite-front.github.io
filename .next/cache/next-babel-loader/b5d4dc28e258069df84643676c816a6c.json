{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Adriana\\\\Desktop\\\\silversite\\\\pages\\\\components\\\\Home\\\\NavBar\\\\Nav.js\";\nvar __jsx = React.createElement;\nimport React, { Component, Fragment } from \"react\";\nimport * as data from \"../NavBar/Navigation.json\";\nimport '../NavBar/';\n\nvar NavBar = /*#__PURE__*/function (_Component) {\n  _inherits(NavBar, _Component);\n\n  function NavBar(props) {\n    var _this;\n\n    _classCallCheck(this, NavBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NavBar).call(this, props)); // Ref's for nav links\n\n    _defineProperty(_assertThisInitialized(_this), \"setUnderline\", function () {\n      var active = _this.state.active; // Calcaulate nav's position from the edge\n\n      var wrapper = _this.nav.wrapper.getBoundingClientRect();\n\n      var containerWidth = _this.nav.container.clientWidth;\n      var positionFromEdge = (wrapper.width - containerWidth) / 2; // Get the scroll position of the div (for when nav is wider than browser)\n\n      var scrollPos = _this.nav.scrollContainer.scrollLeft; // Get active link position\n\n      var activeLink = _this.links[active.section];\n      var activeLinkPos = activeLink.getBoundingClientRect(); // Set line width to match active link width\n\n      _this.nav.line.style.width = \"\".concat(activeLink.clientWidth, \"px\"); // Calculate left position of line to line up with active line\n\n      _this.nav.line.style.left = \"\".concat(activeLinkPos.left - positionFromEdge + scrollPos, \"px\");\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResize\", function () {\n      // Don't transition the underline on resize (so it doesn't lag)\n      _this.nav.line.classList.remove(\"transition\");\n\n      _this.setUnderline();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (e) {\n      e.persist();\n      var activeIndex = data.cities.findIndex(function (x) {\n        return x.section === e.target.id;\n      });\n      var activeObj = data.cities[activeIndex]; // Set transition onClick only\n\n      _this.nav.line.classList.add(\"transition\");\n\n      _this.setState({\n        active: activeObj\n      });\n    });\n\n    _this.links = {}; // Ref's for other nav elements\n\n    _this.nav = {\n      line: null,\n      container: null,\n      wrapper: null\n    };\n    _this.state = {\n      // Stores active nav item - first by default\n      active: data.cities[0]\n    };\n    return _this;\n  }\n\n  _createClass(NavBar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Set underline to the first active link position\n      this.setUnderline(); // Attach event listeners\n\n      this.attachEventListeners();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // Move underline when active link changes\n      this.setUnderline();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Clear event listeners on unmount\n      this.detachEventListeners();\n    }\n  }, {\n    key: \"attachEventListeners\",\n    value: function attachEventListeners() {\n      // Adjust the underline on resize\n      window.addEventListener(\"resize\", this.onResize);\n    }\n  }, {\n    key: \"detachEventListeners\",\n    value: function detachEventListeners() {\n      // Remove adjust the underline on resize\n      window.addEventListener(\"resize\", this.onResize);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var active = this.state.active;\n      return __jsx(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"scroll-container\",\n        ref: function ref(node) {\n          _this2.nav.scrollContainer = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"wrapper\",\n        ref: function ref(node) {\n          _this2.nav.wrapper = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"links-container\",\n        ref: function ref(node) {\n          _this2.nav.container = node;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, data.cities.map(function (cities) {\n        var section = cities.section,\n            label = cities.label;\n        return __jsx(\"div\", {\n          className: \"link\",\n          key: section,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, __jsx(\"button\", {\n          className: active.section === section ? \"active\" : \"\",\n          type: \"button\",\n          id: section,\n          onClick: _this2.onClick,\n          ref: function ref(node) {\n            _this2.links[section] = node;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, label));\n      }), __jsx(\"div\", {\n        ref: function ref(node) {\n          _this2.nav.line = node;\n        },\n        className: \"line\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return NavBar;\n}(Component);\n\n_defineProperty(NavBar, \"propTypes\", {});\n\n_defineProperty(NavBar, \"defaultProps\", {});\n\nexport default NavBar;","map":{"version":3,"sources":["C:/Users/Adriana/Desktop/silversite/pages/components/Home/NavBar/Nav.js"],"names":["React","Component","Fragment","data","NavBar","props","active","state","wrapper","nav","getBoundingClientRect","containerWidth","container","clientWidth","positionFromEdge","width","scrollPos","scrollContainer","scrollLeft","activeLink","links","section","activeLinkPos","line","style","left","classList","remove","setUnderline","e","persist","activeIndex","cities","findIndex","x","target","id","activeObj","add","setState","attachEventListeners","detachEventListeners","window","addEventListener","onResize","node","map","label","onClick"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport * as data from \"../NavBar/Navigation.json\";\r\nimport '../NavBar/'\r\n\r\nclass NavBar extends Component {\r\n  static propTypes = {};\r\n\r\n  static defaultProps = {};\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Ref's for nav links\r\n    this.links = {};\r\n\r\n    // Ref's for other nav elements\r\n    this.nav = {\r\n      line: null,\r\n      container: null,\r\n      wrapper: null\r\n    };\r\n\r\n    this.state = {\r\n      // Stores active nav item - first by default\r\n      active: data.cities[0]\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Set underline to the first active link position\r\n    this.setUnderline();\r\n\r\n    // Attach event listeners\r\n    this.attachEventListeners();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Move underline when active link changes\r\n    this.setUnderline();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Clear event listeners on unmount\r\n    this.detachEventListeners();\r\n  }\r\n\r\n  setUnderline = () => {\r\n    const { active } = this.state;\r\n\r\n    // Calcaulate nav's position from the edge\r\n    const wrapper = this.nav.wrapper.getBoundingClientRect();\r\n    const containerWidth = this.nav.container.clientWidth;\r\n    const positionFromEdge = (wrapper.width - containerWidth) / 2;\r\n\r\n    // Get the scroll position of the div (for when nav is wider than browser)\r\n    const scrollPos = this.nav.scrollContainer.scrollLeft;\r\n\r\n    // Get active link position\r\n    const activeLink = this.links[active.section];\r\n    const activeLinkPos = activeLink.getBoundingClientRect();\r\n\r\n    // Set line width to match active link width\r\n    this.nav.line.style.width = `${activeLink.clientWidth}px`;\r\n    // Calculate left position of line to line up with active line\r\n    this.nav.line.style.left = `${activeLinkPos.left -\r\n      positionFromEdge +\r\n      scrollPos}px`;\r\n  };\r\n\r\n  onResize = () => {\r\n    // Don't transition the underline on resize (so it doesn't lag)\r\n    this.nav.line.classList.remove(\"transition\");\r\n    this.setUnderline();\r\n  };\r\n\r\n  onClick = e => {\r\n    e.persist();\r\n\r\n    const activeIndex = data.cities.findIndex(x => x.section === e.target.id);\r\n    const activeObj = data.cities[activeIndex];\r\n\r\n    // Set transition onClick only\r\n    this.nav.line.classList.add(\"transition\");\r\n    this.setState({ active: activeObj });\r\n  };\r\n\r\n  attachEventListeners() {\r\n    // Adjust the underline on resize\r\n    window.addEventListener(\"resize\", this.onResize);\r\n  }\r\n\r\n  detachEventListeners() {\r\n    // Remove adjust the underline on resize\r\n    window.addEventListener(\"resize\", this.onResize);\r\n  }\r\n\r\n  render() {\r\n    const { active } = this.state;\r\n\r\n    return (\r\n      <Fragment>\r\n        <div\r\n          className=\"scroll-container\"\r\n          ref={node => {\r\n            this.nav.scrollContainer = node;\r\n          }}\r\n        >\r\n          <div\r\n            className=\"wrapper\"\r\n            ref={node => {\r\n              this.nav.wrapper = node;\r\n            }}\r\n          >\r\n            <div className=\"container\">\r\n              <div\r\n                className=\"links-container\"\r\n                ref={node => {\r\n                  this.nav.container = node;\r\n                }}\r\n              >\r\n                {data.cities.map(cities => {\r\n                  const { section, label } = cities;\r\n\r\n                  return (\r\n                    <div className=\"link\" key={section}>\r\n                      <button\r\n                        className={active.section === section ? \"active\" : \"\"}\r\n                        type=\"button\"\r\n                        id={section}\r\n                        onClick={this.onClick}\r\n                        ref={node => {\r\n                          this.links[section] = node;\r\n                        }}\r\n                      >\r\n                        {label}\r\n                      </button>\r\n                    </div>\r\n                  );\r\n                })}\r\n                <div\r\n                  ref={node => {\r\n                    this.nav.line = node;\r\n                  }}\r\n                  className=\"line\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/** Content for each tab would go here */}\r\n        {/* <div>{active.content}</div> */}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;"]},"metadata":{},"sourceType":"module"}