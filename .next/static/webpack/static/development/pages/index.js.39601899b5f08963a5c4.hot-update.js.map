{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.39601899b5f08963a5c4.hot-update.js","sources":["webpack:///./pages/components/Home/NavBar/Nav.js"],"sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport * as data from \"../NavBar/Navigation.json\";\r\n// import '../../Home/NavBar/Nav.css'\r\n\r\nclass NavBar extends Component {\r\n  static propTypes = {};\r\n\r\n  static defaultProps = {};\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Ref's for nav links\r\n    this.links = {};\r\n\r\n    // Ref's for other nav elements\r\n    this.nav = {\r\n      line: null,\r\n      container: null,\r\n      wrapper: null\r\n    };\r\n\r\n    this.state = {\r\n      // Stores active nav item - first by default\r\n      active: data.cities[0]\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Set underline to the first active link position\r\n    this.setUnderline();\r\n\r\n    // Attach event listeners\r\n    this.attachEventListeners();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Move underline when active link changes\r\n    this.setUnderline();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Clear event listeners on unmount\r\n    this.detachEventListeners();\r\n  }\r\n\r\n  setUnderline = () => {\r\n    const { active } = this.state;\r\n\r\n    // Calcaulate nav's position from the edge\r\n    const wrapper = this.nav.wrapper.getBoundingClientRect();\r\n    const containerWidth = this.nav.container.clientWidth;\r\n    const positionFromEdge = (wrapper.width - containerWidth) / 2;\r\n\r\n    // Get the scroll position of the div (for when nav is wider than browser)\r\n    const scrollPos = this.nav.scrollContainer.scrollLeft;\r\n\r\n    // Get active link position\r\n    const activeLink = this.links[active.section];\r\n    const activeLinkPos = activeLink.getBoundingClientRect();\r\n\r\n    // Set line width to match active link width\r\n    this.nav.line.style.width = `${activeLink.clientWidth}px`;\r\n    // Calculate left position of line to line up with active line\r\n    this.nav.line.style.left = `${activeLinkPos.left -\r\n      positionFromEdge +\r\n      scrollPos}px`;\r\n  };\r\n\r\n  onResize = () => {\r\n    // Don't transition the underline on resize (so it doesn't lag)\r\n    this.nav.line.classList.remove(\"transition\");\r\n    this.setUnderline();\r\n  };\r\n\r\n  onClick = e => {\r\n    e.persist();\r\n\r\n    const activeIndex = data.cities.findIndex(x => x.section === e.target.id);\r\n    const activeObj = data.cities[activeIndex];\r\n\r\n    // Set transition onClick only\r\n    this.nav.line.classList.add(\"transition\");\r\n    this.setState({ active: activeObj });\r\n  };\r\n\r\n  attachEventListeners() {\r\n    // Adjust the underline on resize\r\n    window.addEventListener(\"resize\", this.onResize);\r\n  }\r\n\r\n  detachEventListeners() {\r\n    // Remove adjust the underline on resize\r\n    window.addEventListener(\"resize\", this.onResize);\r\n  }\r\n\r\n  render() {\r\n    const { active } = this.state;\r\n\r\n    return (\r\n      <Fragment>\r\n        <div\r\n          className=\"scroll-container\"\r\n          ref={node => {\r\n            this.nav.scrollContainer = node;\r\n          }}\r\n        >\r\n          <div\r\n            className=\"wrapper\"\r\n            ref={node => {\r\n              this.nav.wrapper = node;\r\n            }}\r\n          >\r\n            <div className=\"container\">\r\n              <div\r\n                className=\"links-container\"\r\n                ref={node => {\r\n                  this.nav.container = node;\r\n                }}\r\n              >\r\n                {data.cities.map(cities => {\r\n                  const { section, label } = cities;\r\n\r\n                  return (\r\n                    <div className=\"link\" key={section}>\r\n                      <button\r\n                        className={active.section === section ? \"active\" : \"\"}\r\n                        type=\"button\"\r\n                        id={section}\r\n                        onClick={this.onClick}\r\n                        ref={node => {\r\n                          this.links[section] = node;\r\n                        }}\r\n                      >\r\n                        {label}\r\n                      </button>\r\n                    </div>\r\n                  );\r\n                })}\r\n                <div\r\n                  ref={node => {\r\n                    this.nav.line = node;\r\n                  }}\r\n                  className=\"line\"\r\n                />\r\n                <style jsx> {`\r\n                background-color: teal;\r\n\r\n                .scroll-container {\r\n                  // height: 10px;\r\n                  max-width: 100%;\r\n                  overflow-x: auto;\r\n                }\r\n                .wrapper {\r\n                  min-width: 710px;\r\n                  padding: 0 26px;\r\n                }\r\n                .container {\r\n                  background: violet;\r\n                  // margin: 152px auto 10px;\r\n                  padding: 0 5%;\r\n                  border-bottom: 2px solid #eeeeee;\r\n                  max-width: 1000px;\r\n                }\r\n                .links-container {\r\n                  width: 98%;\r\n                  height: 90%;\r\n                  background-color: yellowgreen;\r\n                  position: relative;\r\n                }\r\n                .links-container .link {\r\n                  margin-bottom: 7px;\r\n                  // background-color: blue;\r\n                  display: inline-block;\r\n                  width: calc(100% / 7);\r\n                }\r\n                .links-container .link button {\r\n                  cursor: pointer;\r\n                  border: none;\r\n                  outline: none;\r\n                  padding: 0;\r\n                  color: #b3b3b3;\r\n                  font-size: 14px;\r\n                  letter-spacing: 0.7px;\r\n                  display: block;\r\n                  margin: auto;\r\n                  // background-color: PINK;\r\n                  font-family: 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;\r\n                }\r\n                .links-container .link button:hover {\r\n                  color: #2384cf;\r\n                }\r\n                .links-container .link button.active {\r\n                  color: #000000;\r\n                }\r\n                .links-container .line {\r\n                  display: block;\r\n                  width: 10px;\r\n                  height: 3px;\r\n                  position: absolute;\r\n                  left: 0;\r\n                  bottom: -2px;\r\n                  background-color: #3C40AB;\r\n                }\r\n                .links-container .line.transition {\r\n                  transition: left 0.35s, width 0.35s;\r\n                }\r\n\r\n`}\r\n               \r\n\r\n                </style>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/** Content for each tab would go here */}\r\n        {/* <div>{active.content}</div> */}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;;;AAKA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAqCA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AA3DA;AA6DA;AACA;AACA;AAAA;AACA;AACA;AAjEA;AAmEA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAxEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAbA;AAiBA;AACA;;;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AA0CA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzBA;AAAA;AAAA;AA0GA;;;;AAxNA;AACA;AADA;AACA;AADA;AACA;AA0NA;;;;A","sourceRoot":""}